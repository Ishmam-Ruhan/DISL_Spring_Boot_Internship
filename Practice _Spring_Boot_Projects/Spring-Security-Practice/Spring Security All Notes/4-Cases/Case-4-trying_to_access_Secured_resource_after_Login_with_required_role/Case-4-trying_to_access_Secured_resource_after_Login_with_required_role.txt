
					#-------------Case-4-trying_to_access_Secured_resource_after_Login_with_required_role -------#

	

	_/ 1st Filter: 
			Name: Security Context Persistance Filter

			Responsibility: 
				
				- Is there any security context in the session? Yes! So, It retrives the Security Context and saved in 
				  "Security context holder."

				- Means, Is the user logged in this application/device? Yes

				- This Security Context will save in Current Thread Local.

					+ Thread Local:

						- Every thread has a thread local object where we can put thread specific data

				- There is a class called "SecurityContextHolder", It has a static method called "getSecurityContext()"
				  It goes to 'Thread Local' and search for security context

	X  2nd Filter:

			Name: Logout Filter

			Responsibility: 

				- Is this a logout request? NO! So, It is not invoked.

	X  3rd Filter:

			Name: Authentication FIlter

			Responsibility: 

				- Is it a authentication request? or Is user send any credintial through this request? NO 
				  So, It is not invoked

	X  4th Filter:

			Name: Remember me filter

			Responsibility: 

				- It checks in the request is there any COOCKIE in the request called "Remember Me"? NO
				

	X  5th Filter:

			Name: Exception Translation Filter

			Responsibility:

				- Check is there any exception or NOT! Exception means not authorised or not authenticated.
				
				- If not authorized for the resource, It'll throw "Access Denied" page

	_/  6th Filter:

			Name: Filter Security Interceptor

			Responsibility:

				- It checks the request is associated with the specific resource has access with the role or not?

				- It deligates a method called "Access Decision Manager". It checks the user has the previledge or not.

				- In our scenario, Yes! It has access.

	** After that it rolled back to top step by step and invoked the 1st filter again. Again it checks if the security context changed 
	  or not. If it is not changed then it will remove the "Security Context Holder" 

